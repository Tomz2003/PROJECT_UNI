# -*- coding: utf-8 -*-
"""XLA.lab2

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14cIvkVsDdZ_feC4bPQdZ-xCD4iuaS4o8

Bài tập 1
"""

from PIL import Image
import numpy as np
import matplotlib.pyplot as plt

def image_inverse(img_path):
    img = Image.open(img_path).convert('L')
    im_arr = np.asarray(img)
    im_inv = 255 - im_arr
    new_img = Image.fromarray(im_inv.astype(np.uint8))  # Thêm .astype(np.uint8)

    plt.figure(figsize=(10, 5))
    plt.subplot(1, 2, 1)
    plt.imshow(img, cmap='gray')
    plt.title('Original Image')
    plt.axis('off')

    plt.subplot(1, 2, 2)
    plt.imshow(new_img, cmap='gray')
    plt.title('Inverted Image')
    plt.axis('off')
    plt.show()

    return new_img

def gamma_correction(img_path, gamma=0.5):
    img = Image.open(img_path).convert('L')
    im_arr = np.asarray(img)
    im_float = im_arr.astype(float)
    im_norm = im_float / 255.0
    im_gamma = np.power(im_norm, gamma) * 255.0
    im_gamma = np.clip(im_gamma, 0, 255).astype(np.uint8)  # Thêm clip và uint8
    new_img = Image.fromarray(im_gamma)

    plt.figure(figsize=(10, 5))
    plt.subplot(1, 2, 1)
    plt.imshow(img, cmap='gray')
    plt.title('Original Image')
    plt.axis('off')

    plt.subplot(1, 2, 2)
    plt.imshow(new_img, cmap='gray')
    plt.title(f'Gamma Correction (γ={gamma})')
    plt.axis('off')
    plt.show()

    return new_img

def main_menu():
    print("Chọn phương pháp biến đổi ảnh:")
    print("I - Image inverse transformation")
    print("G - Gamma-Correction")
    print("L - Log Transformation")
    print("H - Histogram equalization")
    print("C - Contrast Stretching")
    print("Q - Thoát")

    while True:
        choice = input("Nhập lựa chọn của bạn (I/G/L/H/C/Q): ").upper()

        if choice == 'Q':
            print("Kết thúc chương trình")
            break

        img_path = 'quang_ninh.jpg'  # Đảm bảo file ảnh tồn tại

        if choice == 'I':
            print("Đang thực hiện Image inverse transformation...")
            image_inverse(img_path)
        elif choice == 'G':
            print("Đang thực hiện Gamma-Correction...")
            try:
                gamma = float(input("Nhập giá trị gamma (ví dụ 0.5 hoặc 5): "))
                gamma_correction(img_path, gamma)
            except ValueError:
                print("Giá trị gamma không hợp lệ. Vui lòng nhập số.")
        elif choice == 'L':
            print("Đang thực hiện Log Transformation...")
            # Thêm hàm log_transformation ở đây
        elif choice == 'H':
            print("Đang thực hiện Histogram equalization...")
            # Thêm hàm histogram_equalization ở đây
        elif choice == 'C':
            print("Đang thực hiện Contrast Stretching...")
            # Thêm hàm contrast_stretching ở đây
        else:
            print("Lựa chọn không hợp lệ. Vui lòng chọn lại.")

# Chạy chương trình
if __name__ == "__main__":
    main_menu()

"""Bài tập 2"""

from PIL import Image
import numpy as np
import matplotlib.pyplot as plt
from scipy import fftpack
import math

def fast_fourier_transform(img_path):
    try:
        img = Image.open(img_path).convert('L')
        im_arr = np.asarray(img)

        # Thực hiện FFT và dịch chuyển
        fft = np.abs(fftpack.fft2(im_arr))
        fft_shifted = fftpack.fftshift(fft)

        # Chuẩn hóa và log scale
        fft_log = np.log(1 + fft_shifted)
        fft_normalized = (fft_log / np.max(fft_log)) * 255

        # Hiển thị kết quả
        plt.figure(figsize=(12, 6))

        plt.subplot(1, 2, 1)
        plt.imshow(img, cmap='gray')
        plt.title('Original Image')
        plt.axis('off')

        plt.subplot(1, 2, 2)
        plt.imshow(fft_normalized, cmap='gray')
        plt.title('Fast Fourier Transform')
        plt.axis('off')

        plt.tight_layout()
        plt.show()

    except Exception as e:
        print(f"Lỗi khi xử lý FFT: {str(e)}")

def butterworth_filter(img_path, filter_type='lowpass', d0=30, order=1):
    try:
        img = Image.open(img_path).convert('L')
        im_arr = np.asarray(img)

        # Thực hiện FFT
        fft = fftpack.fft2(im_arr)
        fft_shifted = fftpack.fftshift(fft)

        # Tạo bộ lọc Butterworth
        rows, cols = im_arr.shape
        center_row, center_col = rows // 2, cols // 2

        # Tạo meshgrid
        x = np.linspace(0, cols-1, cols)
        y = np.linspace(0, rows-1, rows)
        X, Y = np.meshgrid(x, y)

        # Tính khoảng cách từ tâm
        D = np.sqrt((X - center_col)**2 + (Y - center_row)**2)

        # Tạo bộ lọc tùy theo loại
        if filter_type == 'lowpass':
            H = 1 / (1 + (D / d0)**(2 * order))
        else:  # highpass
            H = 1 / (1 + (d0 / D)**(2 * order))

        # Áp dụng bộ lọc
        filtered = fft_shifted * H

        # Inverse FFT
        ifft_shifted = fftpack.ifftshift(filtered)
        im_filtered = np.abs(fftpack.ifft2(ifft_shifted))

        # Chuẩn hóa
        im_filtered = (im_filtered / np.max(im_filtered)) * 255

        # Hiển thị kết quả
        plt.figure(figsize=(12, 6))

        plt.subplot(1, 2, 1)
        plt.imshow(img, cmap='gray')
        plt.title('Original Image')
        plt.axis('off')

        plt.subplot(1, 2, 2)
        plt.imshow(im_filtered, cmap='gray')
        plt.title(f'Butterworth {filter_type} (d0={d0}, order={order})')
        plt.axis('off')

        plt.tight_layout()
        plt.show()

    except Exception as e:
        print(f"Lỗi khi xử lý bộ lọc: {str(e)}")

def main_menu_2():
    print("Chọn phương pháp biến đổi Fourier:")
    print("F - Fast Fourier")
    print("L - Butterworth Lowpass Filter")
    print("H - Butterworth Highpass Filter")
    print("Q - Thoát")

    while True:
        try:
            choice = input("\nNhập lựa chọn của bạn (F/L/H/Q): ").strip().upper()

            if choice == 'Q':
                print("Kết thúc chương trình")
                break

            img_path = input("Nhập đường dẫn ảnh (hoặc Enter để dùng ảnh mặc định): ").strip()
            if not img_path:
                img_path = 'ha-long-bay-in-vietnam.jpg'  # Ảnh mặc định

            if choice == 'F':
                print("\nĐang thực hiện Fast Fourier Transform...")
                fast_fourier_transform(img_path)

            elif choice in ['L', 'H']:
                filter_type = 'lowpass' if choice == 'L' else 'highpass'
                print(f"\nĐang thực hiện Butterworth {filter_type} Filter...")

                try:
                    d0 = float(input("Nhập cut-off frequency (ví dụ 30): "))
                    order = int(input("Nhập bậc của bộ lọc (ví dụ 1): "))
                    butterworth_filter(img_path, filter_type, d0, order)
                except ValueError:
                    print("Giá trị nhập không hợp lệ. Vui lòng nhập số.")
                    continue

            else:
                print("Lựa chọn không hợp lệ. Vui lòng chọn lại.")

        except KeyboardInterrupt:
            print("\nChương trình bị ngắt bởi người dùng")
            break
        except Exception as e:
            print(f"Lỗi không xác định: {str(e)}")
            continue

if __name__ == "__main__":
    main_menu_2()

"""Câu 3"""

import random
from PIL import Image
import numpy as np
import matplotlib.pyplot as plt

def random_rgb_swap(img_path):
    # Mở ảnh màu
    img = Image.open(img_path)

    # Tách các kênh màu
    r, g, b = img.split()

    # Tạo danh sách các kênh và xáo trộn
    channels = [r, g, b]
    random.shuffle(channels)

    # Hợp nhất các kênh đã xáo trộn
    new_img = Image.merge("RGB", channels)

    return new_img

def apply_random_transformation_1(img):
    # Chọn ngẫu nhiên một phương pháp từ câu 1
    methods = ['inverse', 'gamma', 'log', 'histogram', 'contrast']
    method = random.choice(methods)

    # Chuyển ảnh sang grayscale để xử lý
    img_gray = img.convert('L')
    im_arr = np.asarray(img_gray)

    if method == 'inverse':
        # Image inverse
        im_processed = 255 - im_arr
    elif method == 'gamma':
        # Gamma correction
        gamma = random.uniform(0.3, 2.0)  # Random gamma từ 0.3 đến 2.0
        im_float = im_arr.astype(float)
        im_norm = im_float / 255.0
        im_processed = np.power(im_norm, gamma) * 255.0
    elif method == 'log':
        # Log transformation
        im_float = im_arr.astype(float)
        max_val = np.max(im_float)
        im_processed = (128.0 * np.log(1 + im_float)) / np.log(1 + max_val)
    elif method == 'histogram':
        # Histogram equalization
        im_flat = im_arr.flatten()
        hist, bins = np.histogram(im_arr, 256, [0, 255])
        cdf = hist.cumsum()
        cdf_masked = np.ma.masked_equal(cdf, 0)
        cdf_masked = (cdf_masked - cdf_masked.min()) * 255 / (cdf_masked.max() - cdf_masked.min())
        cdf_filled = np.ma.filled(cdf_masked, 0).astype('uint8')
        im_processed = cdf_filled[im_flat]
        im_processed = np.reshape(im_processed, im_arr.shape)
    else:  # contrast
        # Contrast stretching
        a = im_arr.min()
        b = im_arr.max()
        im_float = im_arr.astype(float)
        im_processed = 255 * (im_float - a) / (b - a)

    # Chuyển về kiểu uint8 và tạo ảnh
    im_processed = np.clip(im_processed, 0, 255).astype(np.uint8)
    processed_img = Image.fromarray(im_processed)

    return processed_img, method

def process_image_3(img_path):
    # Bước 1: Thay đổi thứ tự màu RGB
    swapped_img = random_rgb_swap(img_path)

    # Bước 2: Áp dụng biến đổi ngẫu nhiên
    processed_img, method = apply_random_transformation_1(swapped_img)

    # Hiển thị kết quả
    plt.figure(figsize=(15, 5))

    plt.subplot(1, 3, 1)
    plt.imshow(Image.open(img_path))
    plt.title('Ảnh gốc')
    plt.axis('off')

    plt.subplot(1, 3, 2)
    plt.imshow(swapped_img)
    plt.title('Ảnh sau khi đổi thứ tự RGB')
    plt.axis('off')

    plt.subplot(1, 3, 3)
    plt.imshow(processed_img, cmap='gray')
    plt.title(f'Ảnh sau {method}')
    plt.axis('off')

    plt.show()

    return swapped_img, processed_img

# Sử dụng hàm
img_path = 'ha-long-bay-in-vietnam.jpg'  # Thay bằng đường dẫn ảnh của bạn
swapped, processed = process_image_3(img_path)

"""Câu 4"""

from scipy import fftpack

def apply_random_transformation_2(img):
    # Chọn ngẫu nhiên một phương pháp từ câu 2
    methods = ['fft', 'lowpass', 'highpass']
    method = random.choice(methods)

    # Chuyển ảnh sang grayscale để xử lý
    img_gray = img.convert('L')
    im_arr = np.asarray(img_gray)

    if method == 'fft':
        # Fast Fourier Transform
        fft = np.abs(fftpack.fft2(im_arr))
        fft_shifted = fftpack.fftshift(fft)
        im_processed = np.log(1 + fft_shifted)
        im_processed = (im_processed / np.max(im_processed)) * 255
    elif method == 'lowpass':
        # Butterworth Lowpass Filter
        d0 = random.randint(10, 100)  # Tần số cắt ngẫu nhiên
        order = random.choice([1, 2])  # Bậc ngẫu nhiên

        fft = fftpack.fft2(im_arr)
        fft_shifted = fftpack.fftshift(fft)

        rows, cols = im_arr.shape
        crow, ccol = rows // 2, cols // 2
        x = np.arange(0, cols, 1)
        y = np.arange(0, rows, 1)
        X, Y = np.meshgrid(x, y)
        D = np.sqrt((X - ccol)**2 + (Y - crow)**2)
        H = 1 / (1 + (D / d0)**(2 * order))
        filtered = fft_shifted * H
        ifft_shifted = fftpack.ifftshift(filtered)
        im_processed = np.abs(fftpack.ifft2(ifft_shifted))

        # Áp dụng Min Filter
        from scipy.ndimage import minimum_filter
        im_processed = minimum_filter(im_processed, size=3)
    else:  # highpass
        # Butterworth Highpass Filter
        d0 = random.randint(10, 100)  # Tần số cắt ngẫu nhiên
        order = random.choice([1, 2])  # Bậc ngẫu nhiên

        fft = fftpack.fft2(im_arr)
        fft_shifted = fftpack.fftshift(fft)

        rows, cols = im_arr.shape
        crow, ccol = rows // 2, cols // 2
        x = np.arange(0, cols, 1)
        y = np.arange(0, rows, 1)
        X, Y = np.meshgrid(x, y)
        D = np.sqrt((X - ccol)**2 + (Y - crow)**2)
        H = 1 / (1 + (d0 / D)**(2 * order))
        filtered = fft_shifted * H
        ifft_shifted = fftpack.ifftshift(filtered)
        im_processed = np.abs(fftpack.ifft2(ifft_shifted))

        # Áp dụng Max Filter
        from scipy.ndimage import maximum_filter
        im_processed = maximum_filter(im_processed, size=3)

    # Chuẩn hóa và chuyển về ảnh
    im_processed = (im_processed / np.max(im_processed)) * 255
    im_processed = np.clip(im_processed, 0, 255).astype(np.uint8)
    processed_img = Image.fromarray(im_processed)

    return processed_img, method

def process_image_4(img_path):
    # Bước 1: Thay đổi thứ tự màu RGB
    swapped_img = random_rgb_swap(img_path)

    # Bước 2: Áp dụng biến đổi ngẫu nhiên
    processed_img, method = apply_random_transformation_2(swapped_img)

    # Hiển thị kết quả
    plt.figure(figsize=(15, 5))

    plt.subplot(1, 3, 1)
    plt.imshow(Image.open(img_path))
    plt.title('Ảnh gốc')
    plt.axis('off')

    plt.subplot(1, 3, 2)
    plt.imshow(swapped_img)
    plt.title('Ảnh sau khi đổi thứ tự RGB')
    plt.axis('off')

    plt.subplot(1, 3, 3)
    plt.imshow(processed_img, cmap='gray')
    plt.title(f'Ảnh sau {method}')
    plt.axis('off')

    plt.show()

    return swapped_img, processed_img

# Sử dụng hàm
img_path = 'ha-long-bay-in-vietnam.jpg'  # Thay bằng đường dẫn ảnh của bạn
swapped, processed = process_image_4(img_path)